{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","step","apiKey","kronosEmail","kronosPassword","month","datas","event","setState","objectSpread","target","value","console","log","_this2","fetch","method","headers","Content-Type","Referer","body","JSON","stringify","email","password","then","response","json","data","flash","error","user","api_key","_this3","startDate","moment","endDate","endOf","concat","format","replace","X-API-Key","tasks","volunteers","Set","forEach","task","add","firstname","lastname","volunteer","_volunteer$split","split","_volunteer$split2","toArray","slice","works","proj","acc","playlist","join","activity","name","fr","push","args","length","columnDelimiter","lineDelimiter","keys","result","item","ctr","key","arg","csv","convertArrayOfObjectsToCSV","match","encodeURI","link","document","createElement","setAttribute","click","_this4","react_default","a","Container_default","Row_default","Col_default","Form_default","Group","controlId","Label","Control","type","onChange","emailChange","bind","passwordChange","Button_default","variant","onClick","getApiKey","es","selected","dateFormat","showMonthYearPicker","handleChangeMonth","fetchTasks","downloadCSV","Table_default","striped","bordered","hover","map","React","Component","Boolean","window","location","hostname","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.622f63c9.chunk.js","sourcesContent":["import React from 'react'\n\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Table from 'react-bootstrap/Table'\nimport Button from 'react-bootstrap/Button'\nimport DatePicker from 'react-datepicker'\nimport moment from 'moment'\n\nimport 'whatwg-fetch'\n\nimport 'react-datepicker/dist/react-datepicker.css'\n\nexport default class App extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      step: 0,\n      apiKey: null,\n      kronosEmail: '',\n      kronosPassword: '',\n      month: null,\n      datas: []\n    }\n  }\n\n  emailChange(event){\n    this.setState({...this.state, kronosEmail: event.target.value})\n    console.log(event.target.value)\n  }\n  passwordChange(event){\n    this.setState({...this.state, kronosPassword: event.target.value})\n    console.log(event.target.value)\n  }\n\n  getApiKey() {\n    fetch('https://api-kronos.ticketack.com/kuser/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Referer': 'https://kronos.ticketack.com/'\n      },\n      body: JSON.stringify({\n        email: this.state.kronosEmail,\n        password: this.state.kronosPassword\n      })\n    }).then(response => response.json())\n      .then(data => {\n        if(data.flash.error){\n          // fail\n        } else {\n          this.setState({\n            ...this.state,\n            step: 1,\n            apiKey: data.user.api_key\n          })\n        }\n      })\n  }\n\n  handleChangeMonth(month) {\n    this.setState({\n      ...this.state,\n      month\n    })\n  }\n\n  fetchTasks () {\n    const startDate = moment(this.state.month)\n    const endDate = moment(this.state.month).endOf('month')\n\n    fetch(`https://api-kronos.ticketack.com/task/list?start_at_gte=${startDate.format(\"YYYY-MM-DDTHH:mm:ssZ\").replace('+', '%2B')}&start_at_lte=${endDate.format(\"YYYY-MM-DDTHH:mm:ssZ\").replace('+', '%2B')}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Referer': 'https://kronos.ticketack.com/',\n        'X-API-Key': this.state.apiKey\n      }\n    }).then(response => response.json())\n      .then(data => {\n        const { tasks } = data\n        console.log(tasks)\n        const volunteers = new Set()\n        tasks.forEach(task => {\n          if(task.user)\n            volunteers.add(`${task.user.firstname} ${task.user.lastname}`)\n        })\n\n        const datas = []\n\n        volunteers.forEach(volunteer => {\n          const [firstname, ...lastname] = volunteer.split(' ')\n          const works = {\n            proj: 0,\n            acc: 0,\n            playlist: 0\n          }\n          tasks.forEach(task => {\n            if(task.user && task.user.firstname === firstname && task.user.lastname === lastname.join(' ')){\n              if(task.activity.name.fr === 'Accueil/billetterie')\n                works.acc++\n              if(task.activity.name.fr === 'Projectionniste')\n                works.proj++\n              if(task.activity.name.fr === 'Playlister')\n                works.playlist++\n            }\n          })\n\n          datas.push({\n            volunteer,\n            proj: works.proj,\n            acc: works.acc,\n            playlist: works.playlist\n          })\n        })\n        this.setState({\n          ...this.state,\n          step: 2,\n          datas\n        })\n      })\n  }\n\n  convertArrayOfObjectsToCSV(args) {  \n    const data = args.data || null;\n    if (data == null || !data.length) {\n        return null\n    }\n\n    const columnDelimiter = args.columnDelimiter || ','\n    const lineDelimiter = args.lineDelimiter || '\\n'\n\n    const keys = Object.keys(data[0])\n\n    let result = ''\n    result += keys.join(columnDelimiter)\n    result += lineDelimiter\n\n    data.forEach(function(item) {\n        let ctr = 0\n        keys.forEach(function(key) {\n            if (ctr > 0) result += columnDelimiter\n\n            result += item[key]\n            ctr++\n        });\n        result += lineDelimiter\n    })\n\n    return result\n  }\n\n  downloadCSV(arg) {  \n    let csv = this.convertArrayOfObjectsToCSV({ data: arg })\n    if (csv == null) return\n\n    const filename = 'export.csv'\n\n    if (!csv.match(/^data:text\\/csv/i)) {\n        csv = 'data:text/csv;charset=utf-8,' + csv\n    }\n    const data = encodeURI(csv)\n\n    const link = document.createElement('a')\n    link.setAttribute('href', data)\n    link.setAttribute('download', filename)\n    link.click()\n  }\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            {\n              this.state.step >= 0 && (\n                <div>\n                  <Row>\n                    <h3>1. Récupérer la clé d'API</h3>\n                  </Row>\n                  <Row>\n                    <Form>\n                      <Form.Group controlId='kronos-connect-email'>\n                        <Form.Label>Adresse email Kronos</Form.Label>\n                        <Form.Control type='email' onChange={this.emailChange.bind(this)} />\n                      </Form.Group>\n\n                      <Form.Group controlId='kronos-connect-password'>\n                        <Form.Label>Mot de passe Kronos</Form.Label>\n                        <Form.Control type='password' onChange={this.passwordChange.bind(this)} />\n                      </Form.Group>\n                      <Button variant='primary' onClick={this.getApiKey.bind(this)}>\n                        Récupérer\n                      </Button>\n                    </Form>\n                  </Row>\n                </div>\n              )\n            }\n          </Col>\n          <Col>\n            {\n              this.state.step >= 1 && (\n                <div>\n                  <Row>\n                    <h3>2. Sélection du mois</h3>\n                  </Row>\n                  <Row>\n                    <Form>\n                      <Form.Group controlId='fetch-date-start'>\n                        <Form.Label>Sélectionner le mois</Form.Label><br />\n                        <DatePicker\n                          selected={this.state.month}\n                          dateFormat=\"MM/yyyy\"\n                          showMonthYearPicker\n                          onChange={this.handleChangeMonth.bind(this)}\n                        />\n                      </Form.Group>\n                      <Button variant='primary' onClick={this.fetchTasks.bind(this)}>\n                        Récupérer les bénévoles\n                      </Button>\n                    </Form>\n                  </Row>\n                </div>\n              )\n            }\n          </Col>\n        </Row>\n        {\n          this.state.step >= 2 && (\n            <div>\n              <Row>\n                <h3>3. Affichage des données <Button onClick={() => this.downloadCSV(this.state.datas)}>Exporter en CSV</Button></h3>\n              </Row>\n              <Row>\n                <Table striped bordered hover>\n                  <thead>\n                    <tr>\n                      <th>Bénévole</th>\n                      <th>Accueil/billetterie</th>\n                      <th>Projection</th>\n                      <th>Playlist</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {\n                      this.state.datas.length > 0 && this.state.datas.map(data => (\n                        <tr>\n                          <td>{data.volunteer}</td>\n                          <td>{data.acc}</td>\n                          <td>{data.proj}</td>\n                          <td>{data.playlist}</td>\n                        </tr>\n                      ))\n                    }\n                  </tbody>\n                </Table>\n              </Row>\n            </div>\n          )\n        }\n      </Container>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()"],"sourceRoot":""}
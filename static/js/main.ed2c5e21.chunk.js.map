{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","step","apiKey","kronosEmail","kronosPassword","month","participeData","logData","Map","sums","proj","acc","playlist","projreg","loadingConnect","loadingDatas","connectError","fetchError","datasToFetch","event","setState","objectSpread","target","value","_this2","fetch","method","headers","Content-Type","Referer","body","JSON","stringify","email","password","then","response","json","data","flash","error","user","api_key","finally","currentTarget","_this3","startDate","moment","endDate","endOf","concat","format","replace","X-API-Key","tasks","volunteers","Set","forEach","task","add","firstname","lastname","datas","volunteer","_volunteer$split","split","_volunteer$split2","toArray","slice","works","join","activity","name","fr","push","sortedDatas","sort","a","b","entries","currentEntry","has","start_at","get","fullname","work","set","args","length","columnDelimiter","lineDelimiter","keys","result","item","ctr","key","arg","csv","convertArrayOfObjectsToCSV","match","encodeURI","link","document","createElement","setAttribute","click","_this4","react_default","Navbar_default","bg","variant","Brand","href","Toggle","Collapse","className","Text","Container_default","Row_default","Col_default","Alert_default","Form_default","Group","controlId","Label","Control","type","onChange","emailChange","bind","passwordChange","Button_default","onClick","getApiKey","disabled","index_es","icon","faSpinner","spin","es","selected","dateFormat","showMonthYearPicker","handleChangeMonth","as","datasToFetchChange","fetchDatas","loadingWorks","downloadCSV","Table_default","striped","bordered","hover","map","Array","from","_ref","_ref2","slicedToArray","date","isArray","index","React","Component","Boolean","window","location","hostname","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ed2c5e21.chunk.js","sourcesContent":["import React from 'react'\n\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Table from 'react-bootstrap/Table'\nimport Button from 'react-bootstrap/Button'\nimport Alert from 'react-bootstrap/Alert'\nimport Navbar from 'react-bootstrap/Navbar'\n\nimport DatePicker from 'react-datepicker'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons'\n\nimport moment from 'moment'\n\nimport 'whatwg-fetch'\n\nimport 'react-datepicker/dist/react-datepicker.css'\n\nexport default class App extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      step: 0,\n      apiKey: null,\n      kronosEmail: '',\n      kronosPassword: '',\n      month: null,\n      participeData: [],\n      logData: new Map(),\n      sums: {\n        proj: 0,\n        acc: 0,\n        playlist: 0,\n        projreg: 0\n      },\n      loadingConnect: false,\n      loadingDatas: false,\n      connectError: null,\n      fetchError: null,\n      datasToFetch: 'participe'\n    }\n  }\n\n  emailChange(event){\n    this.setState({...this.state, kronosEmail: event.target.value})\n  }\n  passwordChange(event){\n    this.setState({...this.state, kronosPassword: event.target.value})\n  }\n\n  getApiKey() {\n    this.setState({\n      ...this.state,\n      loadingConnect: true,\n      connectError: null\n    }, () => \n      fetch('https://api-kronos.ticketack.com/kuser/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Referer': 'https://kronos.ticketack.com/'\n        },\n        body: JSON.stringify({\n          email: this.state.kronosEmail,\n          password: this.state.kronosPassword\n        })\n      }).then(response => response.json())\n        .then(data => {\n          if(data.flash.error){\n            this.setState({\n              ...this.state,\n              connectError: data.flash.error\n            })\n          } else {\n            this.setState({\n              ...this.state,\n              step: 1,\n              apiKey: data.user.api_key\n            })\n          }\n        })\n        .finally(() => {\n          this.setState({\n            ...this.state,\n            loadingConnect: false\n          })\n        })\n    )\n  }\n\n  handleChangeMonth(month) {\n    this.setState({\n      ...this.state,\n      step: 2,\n      month\n    })\n  }\n\n  datasToFetchChange(event) {\n    this.setState({...this.state, datasToFetch: event.currentTarget.value})\n  }\n\n  fetchDatas () {\n    const startDate = moment(this.state.month)\n    const endDate = moment(this.state.month).endOf('month')\n    this.setState({\n      ...this.state,\n      loadingDatas: true,\n      fetchError: null\n    }, () => {\n      if(this.state.datasToFetch === 'participe'){\n        fetch(`https://api-kronos.ticketack.com/task/list?start_at_gte=${startDate.format(\"YYYY-MM-DDTHH:mm:ssZ\").replace('+', '%2B')}&start_at_lte=${endDate.format(\"YYYY-MM-DDTHH:mm:ssZ\").replace('+', '%2B')}`, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Referer': 'https://kronos.ticketack.com/',\n            'X-API-Key': this.state.apiKey\n          }\n        }).then(response => response.json())\n          .then(data => {\n            if(data.flash.error){\n              this.setState({\n                ...this.state,\n                fetchError: data.flash.error\n              })\n            } else {\n              const { tasks } = data\n              const volunteers = new Set()\n              tasks.forEach(task => {\n                if(task.user)\n                  volunteers.add(`${task.user.firstname} ${task.user.lastname}`)\n              })\n  \n              const datas = []\n              const sums = {\n                proj: 0,\n                acc: 0,\n                playlist: 0,\n                projreg: 0\n              }\n  \n              volunteers.forEach(volunteer => {\n                const [firstname, ...lastname] = volunteer.split(' ')\n                const works = {\n                  proj: 0,\n                  acc: 0,\n                  playlist: 0,\n                  projreg: 0\n                }\n                tasks.forEach(task => {\n                  if(task.user && task.user.firstname === firstname && task.user.lastname === lastname.join(' ')){\n                    if(task.activity.name.fr === 'Accueil/billetterie'){\n                      works.acc++\n                      sums.acc++\n                    }\n                    if(task.activity.name.fr === 'Projectionniste'){\n                      works.proj++\n                      sums.proj++\n                    }\n                    if(task.activity.name.fr === 'Projectionniste-régisseur'){\n                      works.projreg++\n                      sums.projreg++\n                    }\n                    if(task.activity.name.fr === 'Playlister'){\n                      works.playlist += 3\n                      sums.playlist += 3\n                    }\n                  }\n                })\n  \n                datas.push({\n                  volunteer,\n                  proj: works.proj,\n                  acc: works.acc,\n                  projreg: works.projreg,\n                  playlist: works.playlist\n                })\n              })\n  \n              // Order\n              const sortedDatas = datas.sort((a, b) => {\n                if(a.volunteer < b.volunteer) return -1\n                if(a.volunteer > b.volunteer) return 1\n                return 0\n              })\n  \n              this.setState({\n                ...this.state,\n                step: 3,\n                participeData: sortedDatas,\n                sums\n              })\n            }\n          })\n          .finally(() => this.setState({\n            ...this.state,\n            loadingDatas: false\n          }))\n      } else {\n        fetch(`https://api-kronos.ticketack.com/task/list?start_at_gte=${startDate.format(\"YYYY-MM-DDTHH:mm:ssZ\").replace('+', '%2B')}&start_at_lte=${endDate.format(\"YYYY-MM-DDTHH:mm:ssZ\").replace('+', '%2B')}`, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Referer': 'https://kronos.ticketack.com/',\n            'X-API-Key': this.state.apiKey\n          }\n        }).then(response => response.json())\n          .then(data => {\n            if(data.flash.error){\n              this.setState({\n                ...this.state,\n                fetchError: data.flash.error\n              })\n            } else {\n              const { tasks } = data\n              const entries = new Map()\n              tasks.forEach(task => {\n                if(task.user == null) return\n                \n                const currentEntry = entries.has(task.start_at) ? entries.get(task.start_at) : {volunteers: []}\n                currentEntry.volunteers.push({\n                  name: task.user.fullname,\n                  work: task.activity.name.fr\n                })\n                entries.set(task.start_at, currentEntry);\n              })\n              \n              this.setState({...this.state, step: 3, logData: entries});\n            }\n          })\n          .finally(() => this.setState({\n            ...this.state,\n            loadingDatas: false\n          }))      \n        }\n    })\n  }\n\n  convertArrayOfObjectsToCSV(args) {  \n    const data = args.data || null;\n    if (data == null || !data.length) {\n        return null\n    }\n\n    const columnDelimiter = args.columnDelimiter || ','\n    const lineDelimiter = args.lineDelimiter || '\\n'\n\n    const keys = Object.keys(data[0])\n\n    let result = ''\n    result += keys.join(columnDelimiter)\n    result += lineDelimiter\n\n    data.forEach(function(item) {\n        let ctr = 0\n        keys.forEach(function(key) {\n            if (ctr > 0) result += columnDelimiter\n\n            result += item[key]\n            ctr++\n        });\n        result += lineDelimiter\n    })\n\n    return result\n  }\n\n  downloadCSV(arg) {  \n    let csv = this.convertArrayOfObjectsToCSV({ data: arg })\n    if (csv == null) return\n\n    const filename = 'volunteer-data.csv'\n\n    if (!csv.match(/^data:text\\/csv/i)) {\n        csv = 'data:text/csv;charset=utf-8,' + csv\n    }\n    const data = encodeURI(csv)\n\n    const link = document.createElement('a')\n    link.setAttribute('href', data)\n    link.setAttribute('download', filename)\n    link.click()\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar bg='dark' variant='dark'>\n          <Navbar.Brand href=\"#home\">Kronos Volunteer Fetcher</Navbar.Brand>\n          <Navbar.Toggle />\n          <Navbar.Collapse className='justify-content-end'>\n            <Navbar.Text>\n              Cinémajoie\n            </Navbar.Text>\n          </Navbar.Collapse>\n        </Navbar>\n        <Container className='mt-4'>\n          <Row>\n            <Col>\n              {\n                this.state.step >= 0 && (\n                  <div>\n                    <Row>\n                      <h3>1. Récupérer la clé d'API</h3>\n                    </Row>\n                    <Row>\n                      {\n                        this.state.connectError != null && (\n                          <Alert variant='danger'>\n                            {this.state.connectError}\n                          </Alert>\n                        )\n                      }\n                      <Form>\n                        <Form.Group controlId='kronos-connect-email'>\n                          <Form.Label>Adresse email Kronos</Form.Label>\n                          <Form.Control type='email' onChange={this.emailChange.bind(this)} />\n                        </Form.Group>\n\n                        <Form.Group controlId='kronos-connect-password'>\n                          <Form.Label>Mot de passe Kronos</Form.Label>\n                          <Form.Control type='password' onChange={this.passwordChange.bind(this)} />\n                        </Form.Group>\n                        <Button variant='primary' onClick={this.getApiKey.bind(this)} disabled={this.state.loadingConnect}>\n                          {\n                            this.state.loadingConnect ? (<FontAwesomeIcon icon={faSpinner} spin />) : ('Se connecter')\n                          }\n                        </Button>\n                      </Form>\n                    </Row>\n                  </div>\n                )\n              }\n            </Col>\n            <Col>\n              {\n                this.state.step >= 1 && (\n                  <div>\n                    <Row>\n                      <h3>2. Sélection du mois</h3>\n                    </Row>\n                    <Row>\n                      {\n                        this.state.fetchError != null && (\n                          <Alert variant='danger'>\n                            {this.state.fetchError}\n                          </Alert>\n                        )\n                      }\n                      <Form>\n                        <Form.Group controlId='fetch-date-start'>\n                          <Form.Label>Sélectionner le mois</Form.Label><br />\n                          <DatePicker\n                            selected={this.state.month}\n                            dateFormat=\"MM/yyyy\"\n                            showMonthYearPicker\n                            onChange={this.handleChangeMonth.bind(this)}\n                          />\n                        </Form.Group>\n                      </Form>\n                    </Row>\n                  </div>\n                )\n              }\n            </Col>\n            <Col>\n              {\n                this.state.step >= 2 && (\n                  <div>\n                    <Row>\n                      <h3>3. Sélectionner données</h3>\n                    </Row>\n                    <Row>\n                      <Form>\n                      <Form.Group controlId=\"select-datas\">\n                          <Form.Label>Select datas to fetch</Form.Label>\n                          <Form.Control as=\"select\" onChange={this.datasToFetchChange.bind(this)}>\n                            <option value=\"participe\">Participations</option>\n                            <option value=\"log\">Journal</option>\n                          </Form.Control>\n                        </Form.Group>\n                        <Button variant='primary' onClick={this.fetchDatas.bind(this)} disabled={this.state.loadingDatas}>\n                          {\n                            this.state.loadingWorks ? (<FontAwesomeIcon icon={faSpinner} spin />) : ('Valider')\n                          }\n                        </Button>\n                      </Form>\n                    </Row>\n                  </div>\n                )\n              }\n            </Col>\n          </Row>\n          {\n            this.state.step >= 3 && (\n              <div className='mt-4'>\n                <Row>\n                  <h3>4. Affichage des données <Button onClick={() => this.downloadCSV(this.state.participeData)}>Exporter en CSV</Button></h3>\n                </Row>\n                <Row>\n                  { this.state.datasToFetch === 'participe' ? (\n                    <Table striped bordered hover>\n                      <thead>\n                        <tr>\n                          <th>Bénévole</th>\n                          <th>Accueil/billetterie</th>\n                          <th>Projection</th>\n                          <th>Projection - Régie</th>\n                          <th>Playlist</th>\n                          <th>Billets</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {\n                          this.state.participeData.length > 0 && this.state.participeData.map(data => (\n                            <tr key={data.volunteer}>\n                              <td>{data.volunteer}</td>\n                              <td>{data.acc > 0 ? data.acc : '-'}</td>\n                              <td>{data.proj > 0 ? data.proj : '-'}</td>\n                              <td>{data.projreg > 0 ? data.projreg : '-'}</td>\n                              <td>{data.playlist > 0 ? data.playlist : '-'}</td>\n                              <td>{data.acc + data.proj + data.projreg + data.playlist}</td>\n                            </tr>\n                          ))\n                        }\n                      </tbody>\n                      <tfoot>\n                        <tr>\n                          <td><b>Totaux</b></td>\n                          <td>{this.state.sums.acc}</td>\n                          <td>{this.state.sums.proj}</td>\n                          <td>{this.state.sums.projreg}</td>\n                          <td>{this.state.sums.playlist}</td>\n                          <td>{this.state.sums.acc + this.state.sums.proj + this.state.sums.projreg + this.state.sums.playlist}</td>\n                        </tr>\n                      </tfoot>\n                    </Table>\n                  ) : (\n                    <Table striped bordered hover>\n                      <thead>\n                        <tr>\n                          <th>Séance</th>\n                          <th>Bénévole</th>\n                          <th>Poste</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {\n                          Array.from(this.state.logData).length > 0 && Array.from(this.state.logData, ([date, {volunteers}]) => \n                            (Array.isArray(volunteers) ? volunteers : [volunteers]).map((volunteer, index) => (\n                              <tr key={date + index}>\n                                <td>{index === 0 ? date : '\"'}</td>\n                                <td>{volunteer.name}</td>\n                                <td>{volunteer.work}</td>\n                              </tr>\n                            ))\n                          )\n                        }\n                      </tbody>\n                    </Table>\n                  )}\n                </Row>\n              </div>\n            )\n          }\n        </Container>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()"],"sourceRoot":""}